/*Exercise 1: defer

We need to be sure our Camp function calls the Fire value’s Extinguish method
before the program exits.
But right now, Camp is returning early due to an error, before Extinguish can be called.

We don’t want to leave a lit Fire unattended in the forest!
Revise the Camp function so that Extinguish is always called, even if Camp returns early.*/
package main

import "fmt"

type Fire struct {
	lit bool
}

func (f Fire) Light() {
	f.lit = true
	fmt.Println("Fire lit:", f.lit)
}
func (f Fire) Extinguish() {
	f.lit = false
	fmt.Println("Fire lit:", f.lit)
}

func Camp() error {
	var fire Fire
	defer fire.Extinguish()
	fire.Light()
	return fmt.Errorf("spotted a bear")
	fmt.Println("Toasting marshmallows")
	return nil
}

func main() {
	err := Camp()
	if err != nil {
		fmt.Println(err)
	}
}
