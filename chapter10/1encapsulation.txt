/*Exercise 1: Encapsulation
users of our rectangle type are setting its length and width fields to negative values. We need to encapsulate these fields and add getter and setter methods to control access to them.

Update the rectangle type so that the program below will compile, run, and produce the output shown:
    Move the rectangle type and all its existing methods to a new shapes package.
    You’ll need to rename the type and its existing methods so they’re exported from the new package.
    Leave the struct fields unexported, however, so they can only be accessed through your getter and setter methods.
    The setter methods should return a single error value. If any value less than 0 is passed, return an error value indicating the value is invalid.
    Otherwise, return nil.
MAIN.GO*/

package main

import (
	"fmt"
	"log"
	"shapes"
)

// check logs an error and exits if the error is not nil.
func check(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

func main() {
	var r shapes.Rectangle
	err := r.SetLength(4.2)
	check(err)
	fmt.Println("Длина:", r.Length())
	// Set width to an invalid value.
	err = r.SetWidth(-2.3)
	check(err)
	fmt.Println("Ширина:", r.Width())
}




23:23 05.07.2021
//SHAPES.GO
package shapes

import "errors"

type Rectangle struct {
	length float64
	width  float64
}

func (recta Rectangle) SetLength (leng float64) error{
	if leng < 0 {
		return errors.New("Длина не может быть отрицательной!")
	}else{
	recta.length = leng
		return nil
	}
}

func (recta Rectangle) SetWidth (wid float64) error{
	if wid < 0 {
		return errors.New("Ширина не может быть отрицательной!")
	}else{
	recta.width = wid
		return nil
	}
}


func (recta Rectangle) Length() float64{
	return recta.length
}

func (recta Rectangle) Width() float64{
	return recta.width
}